---

# Load a variable file based on the OS type, or a default if not found.
- include_vars: "{{ item }}"
  with_first_found:
   - "{{ ansible_distribution }}.yml"
   - "{{ ansible_os_family }}.yml"
   - "default.yml"

- name: Ensure the data directory exists
  file:
    path: "{{postgresql_data_directory}}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700

- name: Ensure the conf directory exists
  sudo: yes
  file:
    path: "{{postgresql_conf_directory}}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700
    
- name: configure pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: "{{postgresql_conf_directory}}/pg_hba.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  sudo: yes
  register: postgresql_configuration_1.changed

- name: configure postgresql.conf
  template:
    src: postgresql.conf.j2
    dest: "{{postgresql_conf_directory}}/postgresql.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  sudo: yes
  register: postgresql_configuration_2.changed
  
- name: PostgreSQL | Restart PostgreSQL
  service:
    name: postgresql
    state: restarted
  when: ansible_pkg_mgr == "apt" and postgresql_configuration.changed
  
- name: Start services at login
  file: src=/usr/local/opt/{{ item }}/homebrew.mxcl.{{ item }}.plist path=~/Library/LaunchAgents/homebrew.mxcl.{{ item }}.plist state=link force=yes
  when: ansible_os_family == "Darwin" and (postgresql_configuration_1.changed or postgersql_configuration_2.changed)
  with_items: 
    - postgresql
  
- name: Setup launch agents for services
  command: launchctl load {{ home }}/Library/LaunchAgents/homebrew.mxcl.{{ item }}.plist
  when: ansible_os_family == "Darwin" and (postgresql_configuration_1.changed or postgersql_configuration_2.changed)
  with_items:
    - postgresql
